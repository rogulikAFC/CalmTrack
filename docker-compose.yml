services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"  # Add this for the OUTSIDE listener
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "user-events:1:1"
    volumes:
      - ./data:/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list | grep -q '^user-events$'"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Users
  users_db:
    image: postgres:latest
    container_name: users_db
    command: postgres -p 5001
    ports:
     - 5001:5001
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_USERS_DB}
      POSTGRES_PORT: 5001
    volumes:
      - ./.containers/users_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5001"]
      interval: 5s
      timeout: 5s
      retries: 5

  users.api:
    build:
      context: Users
      dockerfile: Users.API/Dockerfile
    ports:
      - 8001:8080
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USERS_DB: ${POSTGRES_USERS_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ISSUER: ${JWT_ISSUER}
      JWT_AUDIENCE: ${JWT_AUDIENCE}
      KAFKA_BOOTSTRAP_SERVER: kafka:9092
    depends_on:
      users_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: Users

  users.grpc:
    build:
      context: Users
      dockerfile: Users.gRPC/Dockerfile
    ports:
      - 8002:8080
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USERS_DB: ${POSTGRES_USERS_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ISSUER: ${JWT_ISSUER}
      JWT_AUDIENCE: ${JWT_AUDIENCE}
      KAFKA_BOOTSTRAP_SERVER: kafka:9092
    depends_on:
      users_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: Users   

  # Surveys
  surveys_db:
    image: postgres:latest
    container_name: surveys_db
    command: postgres -p 5002
    ports:
     - 5002:5002
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_SURVEYS_DB}
      POSTGRES_PORT: 5002
    volumes:
      - ./.containers/surveys_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5002"]
      interval: 5s
      timeout: 5s
      retries: 5


  surveys.rest:
    build:
      context: Surveys
      dockerfile: Surveys.REST/Dockerfile
    ports:
      - 8003:8080
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_SURVEYS_DB: ${POSTGRES_SURVEYS_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ISSUER: ${JWT_ISSUER}
      JWT_AUDIENCE: ${JWT_AUDIENCE}
      KAFKA_BOOTSTRAP_SERVER: kafka:9092
    depends_on:
      surveys_db:
        condition: service_healthy 
      kafka:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: Surveys

  # Mail
  mail_db:
    image: postgres:latest
    container_name: mail_db
    command: postgres -p 5003 # & /bin/bash -c & sleep 600
    ports:
     - 5003:5003
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_MAIL_DB}
      POSTGRES_PORT: 5003
    volumes:
      - ./.containers/mail_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5003"]
      interval: 5s
      timeout: 5s
      retries: 5

  mail.rest:
    build:
      context: Mail
      dockerfile: Mail.REST/Dockerfile
    ports:
      - 8004:8080
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MAIL_DB: ${POSTGRES_MAIL_DB}
      KAFKA_BOOTSTRAP_SERVER: kafka:9092
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL}
    depends_on:
      kafka:
        condition: service_healthy
      mail_db:
        condition: service_healthy 
    volumes:
      - ./Mail/Mail.Application/MailTemplates:/app/MailTemplates
    develop:
      watch:
        - action: rebuild
          path: Mail