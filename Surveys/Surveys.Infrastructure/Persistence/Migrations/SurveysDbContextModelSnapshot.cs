// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Surveys.Infrastructure.Persistence;

#nullable disable

namespace Surveys.Infrastructure.persistence.migrations
{
    [DbContext(typeof(SurveysDbContext))]
    partial class SurveysDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Surveys.Domain.Survey.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("AnswerText", "QuestionId")
                        .IsUnique();

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Surveys.Domain.Survey.FormInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOnly")
                        .HasColumnType("date");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ResultId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.HasIndex("UserId");

                    b.ToTable("FormInstances");
                });

            modelBuilder.Entity("Surveys.Domain.Survey.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId", "SerialNumber")
                        .IsUnique();

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Surveys.Domain.Survey.Scale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("From")
                        .HasColumnType("integer");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uuid");

                    b.Property<int>("To")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId", "Value")
                        .IsUnique();

                    b.ToTable("Scales");
                });

            modelBuilder.Entity("Surveys.Domain.Survey.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Surveys.Domain.Survey.UserAnswer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FormInstanceId")
                        .HasColumnType("uuid");

                    b.HasKey("AnswerId", "UserId", "FormInstanceId");

                    b.HasIndex("FormInstanceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("Surveys.Domain.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Surveys.Domain.Survey.Answer", b =>
                {
                    b.HasOne("Surveys.Domain.Survey.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Surveys.Domain.Survey.FormInstance", b =>
                {
                    b.HasOne("Surveys.Domain.Survey.Scale", "Result")
                        .WithMany("FormInstances")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Surveys.Domain.User.User", "User")
                        .WithMany("InstancesOfCompletedSurveys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Surveys.Domain.Survey.Question", b =>
                {
                    b.HasOne("Surveys.Domain.Survey.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Surveys.Domain.Survey.Scale", b =>
                {
                    b.HasOne("Surveys.Domain.Survey.Survey", "Survey")
                        .WithMany("Scales")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Surveys.Domain.Survey.UserAnswer", b =>
                {
                    b.HasOne("Surveys.Domain.Survey.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surveys.Domain.Survey.FormInstance", "FormInstance")
                        .WithMany("UserAnswers")
                        .HasForeignKey("FormInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Surveys.Domain.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("FormInstance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Surveys.Domain.Survey.FormInstance", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("Surveys.Domain.Survey.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Surveys.Domain.Survey.Scale", b =>
                {
                    b.Navigation("FormInstances");
                });

            modelBuilder.Entity("Surveys.Domain.Survey.Survey", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Scales");
                });

            modelBuilder.Entity("Surveys.Domain.User.User", b =>
                {
                    b.Navigation("InstancesOfCompletedSurveys");
                });
#pragma warning restore 612, 618
        }
    }
}
